// Code generated by MockGen. DO NOT EDIT.
// Source: ./auth.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// GetLogin mocks base method.
func (m *MockIAuthService) GetLogin(service string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogin", service)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetLogin indicates an expected call of GetLogin.
func (mr *MockIAuthServiceMockRecorder) GetLogin(service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogin", reflect.TypeOf((*MockIAuthService)(nil).GetLogin), service)
}

// PostLogin mocks base method.
func (m *MockIAuthService) PostLogin(uid string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostLogin", uid)
	ret0, _ := ret[0].(string)
	return ret0
}

// PostLogin indicates an expected call of PostLogin.
func (mr *MockIAuthServiceMockRecorder) PostLogin(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostLogin", reflect.TypeOf((*MockIAuthService)(nil).PostLogin), uid)
}

// ServiceValidation mocks base method.
func (m *MockIAuthService) ServiceValidation(ticket string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceValidation", ticket)
	ret0, _ := ret[0].(string)
	return ret0
}

// ServiceValidation indicates an expected call of ServiceValidation.
func (mr *MockIAuthServiceMockRecorder) ServiceValidation(ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceValidation", reflect.TypeOf((*MockIAuthService)(nil).ServiceValidation), ticket)
}
